// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  fullName      String
  email         String?   @unique
  phone         String?   @unique
  password      String
  otp           String?
  oauthProvider String? // e.g., 'google' or 'facebook'
  oauthId       String? // the provider user ID
  expiredAt     DateTime? @default(dbgenerated("now() + interval '5 minutes'"))
  createdAt     DateTime  @default(now())
  isVerified    Boolean   @default(false)
  role          Role

  chef     Chef?
  customer Customer?
}

model Customer {
  id              String   @id
  deliveryAddress String?
  favoriteMeals   String[]
  recentOrders    String[]
  user            User     @relation(fields: [id], references: [id])

  orders Order[]
}

model Chef {
  id             String   @id
  address        String?
  bio            String?
  avgReviewScore Float?   @default(0.0)
  totalReviews   Int?     @default(0)
  availableMeals String[]
  certification  String?
  user           User     @relation(fields: [id], references: [id])

  meals  Meal[]
  orders Order[]
}

model Meal {
  id              String       @id @default(uuid())
  chefId          String
  name            String
  description     String?
  price           Float
  photoUrl        String?
  category        MealCategory
  preparationTime Int
  isAvailable     Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  avgRating       Float?       @default(0.0)

  chef   Chef    @relation(fields: [chefId], references: [id])
  orders Order[]
}

model Order {
  id                  String        @id @default(uuid())
  customerId          String
  chefId              String
  mealId              String
  quantity            Int
  totalPrice          Float
  status              OrderStatus   @default(PENDING)
  deliveryType        DeliveryType
  deliveryAddress     String?
  specialInstructions String?
  paymentStatus       Boolean       @default(false)
  paymentMethod       PaymentMethod
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  chef     Chef     @relation(fields: [chefId], references: [id])
  meal     Meal     @relation(fields: [mealId], references: [id])
}

enum MealCategory {
  SANDWICHES
  PIZZA
  HEALTHY
  TRADITIONAL
  FASTFOOD
  DESSERT
}

enum Role {
  CUSTOMER
  CHEF
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum DeliveryType {
  DELIVERY
  PICKUP
}

enum PaymentMethod {
  CHARGILY
  CASH
  CARD
}
